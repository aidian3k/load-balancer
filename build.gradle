import groovy.transform.*

plugins {
    id 'java'
}

group = 'ee.pw.microservice'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    implementation 'org.postgresql:postgresql:42.7.3'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'com.google.code.gson:gson:2.8.8'
}

tasks.register('runWorkers') {
    doLast {
        def argumentsFile = file('src/main/resources/workers_list.txt')

        def javaExecTasks = []
        def counter = 0

        argumentsFile.eachLine { line ->
            println("Running worker program with following arguments: $line")
            def workerArguments = line.split(",")

            def javaExecTask = tasks.register("runWorker${counter}", JavaExec) {
                mainClass = 'ee.pw.microservice.worker.WorkerMain'
                classpath = sourceSets.main.runtimeClasspath
                args(workerArguments[1])
            }

            javaExecTasks.add(javaExecTask)
            counter++
        }

        javaExecTasks.each { task ->
            task.get().exec()
        }
    }
}


tasks.register('runLoadBalancer') {
    doLast {
        def algorithm_value = project.hasProperty('algorithm') ? project.property('algorithm') : 'ROUND_ROBIN'
        println("Running load-balancer with algorithm: $algorithm_value")

        javaexec {
            mainClass = 'ee.pw.microservice.load_balancer.LoadBalancerMain'
            classpath = sourceSets.main.runtimeClasspath
            args(algorithm_value)
        }
    }
}

tasks.register('runClient') {
    doLast {
        javaexec {
            mainClass = 'ee.pw.microservice.client.ClientMain'
            classpath = sourceSets.main.runtimeClasspath
        }
    }
}

test {
    useJUnitPlatform()
}